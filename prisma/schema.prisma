generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(AGENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  calls         Call[]
  sms           SMS[]
  metrics       AgentMetrics[]
  campaignExecutions CampaignExecution[]
  interactions      Interaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Call {
  id          String     @id @default(cuid())
  phoneNumber String
  status      CallStatus @default(INITIATED)
  duration    Int?
  startTime   DateTime   @default(now())
  endTime     DateTime?
  recordingUrl String?
  transcript  String?    @db.Text
  agentId     String?
  agent       User?      @relation(fields: [agentId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SMS {
  id           String    @id @default(cuid())
  phoneNumber  String
  message      String    @db.Text
  status       SMSStatus @default(SENT)
  sentTime     DateTime  @default(now())
  deliveredTime DateTime?
  agentId      String?
  agent        User?     @relation(fields: [agentId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model AgentMetrics {
  id                    String   @id @default(cuid())
  agentId              String
  agent                User     @relation(fields: [agentId], references: [id])
  totalCalls           Int      @default(0)
  averageHandleTime    Int      @default(0)
  customerSatisfaction Float    @default(0)
  date                 DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  type        CampaignType
  status      CampaignStatus @default(DRAFT)
  triggerConditions Json?
  contentSequence Json?
  metrics     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  executions  CampaignExecution[]
}

model CampaignExecution {
  id          String    @id @default(cuid())
  campaignId  String
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  customerId  String
  customer    User      @relation(fields: [customerId], references: [id])
  currentStep Int       @default(0)
  status      ExecutionStatus @default(ACTIVE)
  nextActionAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CallRecording {
  id          String    @id @default(cuid())
  callId      String
  call        Call      @relation(fields: [callId], references: [id])
  audioUrl    String
  transcript  String?   @db.Text
  createdAt   DateTime  @default(now())
}

model Interaction {
  id          String    @id @default(cuid())
  customerId  String
  customer    User      @relation(fields: [customerId], references: [id])
  type        InteractionType
  direction   InteractionDirection
  subject     String?
  content     String?   @db.Text
  metadata    Json?
  createdAt   DateTime  @default(now())
}

model KnowledgeArticle {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  category    String
  tags        String[]
  vectorId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  ADMIN
  SUPERVISOR
  AGENT
}

enum CallStatus {
  INITIATED
  IN_PROGRESS
  COMPLETED
  FAILED
  MISSED
}

enum SMSStatus {
  SENT
  DELIVERED
  FAILED
}

enum CampaignType {
  EMAIL
  SMS
  PHONE
  MIXED
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum ExecutionStatus {
  ACTIVE
  COMPLETED
  PAUSED
  FAILED
}

enum InteractionType {
  CALL
  EMAIL
  CHAT
  MEETING
}

enum InteractionDirection {
  INBOUND
  OUTBOUND
} 